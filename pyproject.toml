[project]
name = "gpux"
version = "0.1.1"
description = "Docker-like GPU runtime for ML inference with universal GPU compatibility"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Jorge MB", email = "jmorenobl@gmail.com"}
]
license = {text = "MIT"}
keywords = ["gpu", "ml", "inference", "onnx", "docker", "runtime"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "numpy>=1.24.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "huggingface-hub>=0.19.0",
    # Core serving dependencies
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    # Core ML conversion dependencies
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "scikit-learn>=1.3.0",
    "optimum[onnxruntime]>=1.14.0",
    "tf2onnx>=1.15.0",
]

[project.optional-dependencies]
tensorflow = [
    "tensorflow>=2.13.0",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.13.3",
    "mypy>=1.18.2",
    "pre-commit>=4.0.0",
    "bandit[toml]>=1.8.6",
    "types-tensorflow>=2.18.0.20251008",
]
docs = [
    "mkdocs-material>=9.6.21",
    "mkdocs-material-extensions>=1.3.1",
    "pymdown-extensions>=10.16.1",
]


[project.scripts]
gpux = "gpux.cli.main:app"

[project.urls]
Homepage = "https://github.com/gpux/gpux-runtime"
Documentation = "https://docs.gpux.io"
Repository = "https://github.com/gpux/gpux-runtime"
Issues = "https://github.com/gpux/gpux-runtime/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/gpux"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/docs",
    "/pyproject.toml",
    "/README.md",
]


[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A",
    "COM", "C4", "DTZ", "T10", "DJ", "EM", "EXE", "FA", "ISC", "ICN", "G",
    "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM",
    "TID", "TCH", "INT", "ARG", "PTH", "TD", "FIX", "ERA", "PD", "PGH", "PL",
    "TRY", "FLY", "NPY", "AIR", "PERF", "FURB", "LOG", "RUF"
]
ignore = [
    "S101",  # Use of assert detected
    "PLR0913",  # Too many arguments to function call
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicitly concatenated string literals
    "A003",  # Class attribute shadowing builtin
    "BLE001",  # Do not catch blind exception
    "S603",  # subprocess call: check for execution of untrusted input
    "PLC0415",  # import should be at top-level (for optional imports)
    "I001",  # Import block is un-sorted (auto-fixable)
    "PT001",  # Use @pytest.fixture over @pytest.fixture() (auto-fixable)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "PLR2004", "SLF001"]
"scripts/**/*.py" = [
    "T201",  # print found (CLI scripts need prints)
    "S603",  # subprocess call: check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
    "TRY300",  # Consider moving this statement to an `else` block
    "E501",  # Line too long (for CLI output formatting)
    "G004",  # Logging statement uses f-string
    "PTH123",  # `open()` should be replaced by `Path.open()`
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped defs for now
disallow_incomplete_defs = false  # Allow incomplete defs for now
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow untyped decorators for now
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "onnx.*",
    "onnxruntime.*",
    "numpy.*",
    "yaml.*",
    "click.*",
    "typer.*",
    "rich.*",
    "pydantic.*",
    "pytest.*",
    "tf2onnx.*",
    # Core dependencies that may not have complete type stubs
    "uvicorn.*",
    "fastapi.*",
    "torch.*",
    "transformers.*",
    "optimum.*",
    "optimum.exporters.*",
    "optimum.exporters.onnx.*",
    "sklearn.*",
    "cv2.*",
    "PIL.*",
    # Optional dependencies
    "tensorflow.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/gpux",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/gpux"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    ".git",
    "__pycache__",
    "htmlcov",
    "site",
]
skips = ["B101", "B603"]  # Skip assert_used test and subprocess calls
exclude_lines = [
    "scripts/**/*.py:B404",  # subprocess import
    "scripts/**/*.py:B603",  # subprocess call
    "scripts/**/*.py:B607",  # partial executable path
]
