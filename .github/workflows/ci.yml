name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          uv sync --dev
        else
          uv sync --dev --extra tensorflow
        fi

    - name: Run linting
      run: uv run ruff check src/ tests/

    - name: Run type checking
      run: uv run mypy src/

    - name: Run tests
      run: uv run pytest --cov=src/gpux --cov-report=xml --cov-report=html

    - name: Test TensorFlow functionality (Linux & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Testing TensorFlow converter on ${{ matrix.os }}..."
        uv run python -c "
        from gpux.core.conversion.tensorflow import TensorFlowConverter
        converter = TensorFlowConverter()
        print('TensorFlow converter created successfully')
        "

    - name: Verify TensorFlow not available (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Verifying TensorFlow is not installed on Windows..."
        uv run python -c "
        try:
            from gpux.core.conversion.tensorflow import TensorFlowConverter
            converter = TensorFlowConverter()
            print('ERROR: TensorFlow should not be available on Windows')
            exit(1)
        except ImportError as e:
            print(f'SUCCESS: TensorFlow correctly not available on Windows: {e}')
        "

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync --dev --extra tensorflow

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    name: Security scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync --dev --extra tensorflow

    - name: Run security scan
      run: uv run ruff check --select S src/ tests/

    - name: Run bandit security linter
      run: |
        uv add bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt
